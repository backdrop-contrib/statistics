<?php

/**
 * @file
 * Logs and displays access statistics for a site.
 */

/**
 * Implements hook_exit().
 *
 * Gathers statistics for page accesses.
 */
function statistics_exit() {
  $config = config('statistics.settings');
  global $user;

  // When serving cached pages with the 'page_cache_without_database'
  // configuration, system variables need to be loaded. This is a major
  // performance decrease for non-database page caches, but with Statistics
  // module, it is likely to also have 'enable_access_log' enabled,
  // in which case we need to bootstrap to the session phase anyway.
  backdrop_bootstrap(BACKDROP_BOOTSTRAP_VARIABLES);

  // We are counting content views.
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL && !statistics_node_count_excluded_role()) {
    $node = menu_get_object();
    $count_node_types = $config->get('count_node_types');
    if ($config->get('count_content_views') && isset($node->type) && in_array($node->type, $count_node_types) && !$config->get('count_content_views_ajax')) {
      // A node has been viewed, so update the node's counters.
      db_merge('node_counter')
        ->key(array('nid' => arg(1)))
        ->fields(array(
          'yearcount' => 1,
          'monthcount' => 1,
          'weekcount' => 1,
          'daycount' => 1,
          'totalcount' => 1,
          'timestamp' => REQUEST_TIME,
        ))
        ->expression('yearcount', 'yearcount + 1')
        ->expression('monthcount', 'monthcount + 1')
        ->expression('weekcount', 'weekcount + 1')
        ->expression('daycount', 'daycount + 1')
        ->expression('totalcount', 'totalcount + 1')
        ->execute();
    }
  }
  if ($config->get('enable_access_log')) {
    // For anonymous users unicode.inc will not have been loaded.
    include_once BACKDROP_ROOT . '/core/includes/unicode.inc';
    // Log this page access.
    db_insert('accesslog')
      ->fields(array(
        'title' => truncate_utf8(strip_tags(backdrop_get_title()), 255),
        'path' => truncate_utf8(_statistics_clean_utf8($_GET['q']), 255),
        'url' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '',
        'hostname' => ip_address(),
        'uid' => $user->uid,
        'sid' => session_id(),
        'timer' => (int) timer_read('page'),
        'timestamp' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Implements hook_permission().
 */
function statistics_permission() {
  return array(
    'administer statistics' => array(
      'title' => t('Administer statistics'),
    ),
    'access statistics' => array(
      'title' => t('View content access statistics'),
    ),
    'view post access counter' => array(
      'title' => t('View content hits'),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function statistics_node_view($node, $view_mode) {
  $config = config('statistics.settings');
  $count_node_types = $config->get('count_node_types');
  global $user;

  // Attach Ajax node count statistics if configured.
  if ($config->get('count_content_views') && $config->get('count_content_views_ajax') && in_array($node->type, $count_node_types) && !statistics_node_count_excluded_role()) {
    if (!empty($node->nid) && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
      $statistics = backdrop_get_path('module', 'statistics') . '/statistics.js';
      $node->content['#attached']['js'][$statistics] = array(
        'scope' => 'footer',
      );
      $settings = array('data' => array('nid' => $node->nid), 'url' => url(backdrop_get_path('module', 'statistics') . '/statistics.php', array('absolute' => TRUE)));
      $node->content['#attached']['js'][] = array(
        'data' => array('statistics' => $settings),
        'type' => 'setting',
      );
    }
  }

  if ($view_mode != 'rss') {
    if (user_access('view post access counter')) {
      $statistics = statistics_get($node->nid);
      if ($statistics) {
        $links['statistics_counter']['title'] = format_plural($statistics['totalcount'], '1 read', '@count reads');
        $node->content['links']['statistics'] = array(
          '#theme' => 'links__node__statistics',
          '#links' => $links,
          '#attributes' => array('class' => array('links', 'inline')),
        );
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function statistics_menu() {
  $items['admin/reports/hits'] = array(
    'title' => 'Recent hits',
    'description' => 'View pages that have recently been visited.',
    'page callback' => 'statistics_recent_hits',
    'access arguments' => array('access statistics'),
    'file' => 'statistics.admin.inc',
  );
  $items['admin/reports/pages'] = array(
    'title' => 'Top pages',
    'description' => 'View pages that have been hit frequently.',
    'page callback' => 'statistics_top_pages',
    'access arguments' => array('access statistics'),
    'weight' => 1,
    'file' => 'statistics.admin.inc',
  );
  $items['admin/reports/visitors'] = array(
    'title' => 'Top visitors',
    'description' => 'View visitors that hit many pages.',
    'page callback' => 'statistics_top_visitors',
    'access arguments' => array('access statistics'),
    'weight' => 2,
    'file' => 'statistics.admin.inc',
  );
  $items['admin/reports/referrers'] = array(
    'title' => 'Top referrers',
    'description' => 'View top referrers.',
    'page callback' => 'statistics_top_referrers',
    'access arguments' => array('access statistics'),
    'file' => 'statistics.admin.inc',
  );
  $items['admin/reports/access/%'] = array(
    'title' => 'Details',
    'description' => 'View access log.',
    'page callback' => 'statistics_access_log',
    'page arguments' => array(3),
    'access arguments' => array('access statistics'),
    'file' => 'statistics.admin.inc',
  );
  $items['admin/config/system/statistics'] = array(
    'title' => 'Statistics',
    'description' => 'Control details about what and how your site logs access statistics.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('statistics_settings_form'),
    'access arguments' => array('administer statistics'),
    'file' => 'statistics.admin.inc',
    'weight' => -15,
  );
  $items['user/%user/track/navigation'] = array(
    'title' => 'Track page visits',
    'page callback' => 'statistics_user_tracker',
    'access callback' => 'user_access',
    'access arguments' => array('access statistics'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'statistics.pages.inc',
  );
  $items['node/%node/track'] = array(
    'title' => 'Track',
    'page callback' => 'statistics_node_tracker',
    'access callback' => 'user_access',
    'access arguments' => array('access statistics'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'statistics.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_user_cancel().
 */
function statistics_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      db_update('accesslog')
        ->fields(array('uid' => 0))
        ->condition('uid', $account->uid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_user_delete().
 */
function statistics_user_delete($account) {
  db_delete('accesslog')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_cron().
 */
function statistics_cron() {
  $timestamps = array(
    'year' => 86400*365,
    'month' => 86400*30,
    'week' => 86400*7,
    'day' => 86400,
  );

  foreach ($timestamps as $timestamp => $interval) {
    $stamp = 'statistics_' . $timestamp . '_timestamp';
    $statistics_timestamp = state_get($stamp);
    if ((REQUEST_TIME - $statistics_timestamp) >= $interval) {
      // Reset day counts.
      db_update('node_counter')
        ->fields(array($timestamp . 'count' => 0))
        ->execute();
      state_set($stamp, REQUEST_TIME);
    }
  }

  // Clean up expired access logs (if applicable).
  $config = config('statistics.settings');
  if ($config->get('flush_accesslog_timer') > 0) {
    db_delete('accesslog')
      ->condition('timestamp', REQUEST_TIME - $config->get('flush_accesslog_timer'), '<')
      ->execute();
  }
}

/**
 * Returns the most viewed content of all time, various time periods, or the
 * last-viewed node.
 *
 * @param $dbfield
 *   The database field to use, one of:
 *   - 'totalcount': Integer that shows the top viewed content of all time.
 *   - 'daycount': Integer that shows the top viewed content for today.
 *   - 'weekcount': Integer that shows the top viewed content for the week.
 *   - 'monthcount': Integer that shows the top viewed content for the last 30
 *     days.
 *   - 'yearcount': Integer that shows the top viewed content for the last
 *     365 days.
 *   - 'timestamp': Integer that shows only the last viewed node.
 * @param $dbrows
 *   The number of rows to be returned.
 *
 * @return SelectQuery|FALSE
 *   A query result containing the node ID, title, user ID that owns the node,
 *   and the username for the selected node(s), or FALSE if the query could not
 *   be executed correctly.
 */
function statistics_title_list($dbfield, $dbrows) {
  if (in_array($dbfield, array('totalcount', 'daycount', 'weekcount', 'monthcount', 'yearcount', 'timestamp'))) {
    $query = db_select('node', 'n');
    $query->addTag('node_access');
    $query->join('node_counter', 's', 'n.nid = s.nid');
    $query->join('users', 'u', 'n.uid = u.uid');

    return $query
      ->fields('n', array('nid', 'title'))
      ->fields('u', array('uid', 'name'))
      ->condition($dbfield, 0, '<>')
      ->condition('n.status', 1)
      ->orderBy($dbfield, 'DESC')
      ->range(0, $dbrows)
      ->execute();
  }
  return FALSE;
}


/**
 * Retrieves a node's "view statistics".
 *
 * @param $nid
 *   The node ID.
 *
 * @return
 *   An associative array containing:
 *   - totalcount: Integer for the total number of times the node has been
 *     viewed.
 *   - daycount, weekcount, monthcount, yearcount: Integers for the total
 *     number of times the node has been viewed for time intervals.
 *     "today". For the daycount to be reset, cron must be enabled.
 *   - timestamp: Integer for the timestamp of when the node was last viewed.
 */
function statistics_get($nid) {

  if ($nid > 0) {
    // Retrieve an array with both totalcount and time interval counts.
    return db_query('SELECT totalcount, daycount, weekcount, monthcount, yearcount, timestamp FROM {node_counter} WHERE nid = :nid', array(':nid' => $nid), array('target' => 'slave'))->fetchAssoc();
  }
}

/**
 * Implements hook_block_info().
 */
function statistics_block_info() {
  $blocks = array();

  if (config_get('statistics.settings', 'count_content_views')) {
    $blocks['popular']['info'] = t('Popular content');
    $blocks['popular']['description'] = t('Display popular content');
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function statistics_block_configure($delta = '') {
  $config = config('statistics.settings');
  // Popular content block settings
  $numbers = array('0' => t('Disabled')) + backdrop_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40));
  $form['block_top_day_num'] = array(
    '#type' => 'select',
    '#title' => t("Number of day's top views to display"),
    '#default_value' => $config->get('block_top_day_num'),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "day" list.'),
  );
  $form['block_top_week_num'] = array(
    '#type' => 'select',
    '#title' => t("Number of week's top views to display"),
    '#default_value' => $config->get('block_top_week_num'),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "week" list.'),
  );
  $form['block_top_month_num'] = array(
    '#type' => 'select',
    '#title' => t("Number of month's top views to display"),
    '#default_value' => $config->get('block_top_month_num'),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "month" list.'),
  );
  $form['block_top_year_num'] = array(
    '#type' => 'select',
    '#title' => t("Number of year's top views to display"),
    '#default_value' => $config->get('block_top_year_num'),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "year" list.'),
  );
  $form['block_top_all_num'] = array(
    '#type' => 'select',
    '#title' => t('Number of all time views to display'),
    '#default_value' => $config->get('block_top_all_num'),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "all time" list.'),
  );
  $form['block_top_last_num'] = array(
    '#type' => 'select',
    '#title' => t('Number of most recent views to display'),
    '#default_value' => $config->get('block_top_last_num'),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "recently viewed" list.'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function statistics_block_save($delta = '', $edit = array()) {
  $config = config('statistics.settings');
  $config->set('block_top_day_num', $edit['block_top_day_num']);
  $config->set('block_top_week_num', $edit['block_top_week_num']);
  $config->set('block_top_month_num', $edit['block_top_month_num']);
  $config->set('block_top_year_num', $edit['block_top_year_num']);
  $config->set('block_top_all_num', $edit['block_top_all_num']);
  $config->set('block_top_last_num', $edit['block_top_last_num']);
  $config->save();
}

/**
 * Implements hook_block_view().
 */
function statistics_block_view($delta = '') {
  $config = config('statistics.settings');
  if (user_access('access content')) {
    $content = array();

    $daytop = $config->get('block_top_day_num');
    if ($daytop && ($result = statistics_title_list('daycount', $daytop)) && ($node_title_list = node_title_list($result, t("Today's:")))) {
      $content['top_day'] = $node_title_list;
      $content['top_day']['#suffix'] = '<br />';
    }

    $weektop = $config->get('block_top_week_num');
    if ($weektop && ($result = statistics_title_list('weekcount', $weektop)) && ($node_title_list = node_title_list($result, t("This week:")))) {
      $content['top_week'] = $node_title_list;
      $content['top_week']['#suffix'] = '<br />';
    }

    $monthtop = $config->get('block_top_month_num');
    if ($monthtop && ($result = statistics_title_list('monthcount', $monthtop)) && ($node_title_list = node_title_list($result, t("This month:")))) {
      $content['top_month'] = $node_title_list;
      $content['top_month']['#suffix'] = '<br />';
    }

    $yeartop = $config->get('block_top_year_num');
    if ($yeartop && ($result = statistics_title_list('yearcount', $yeartop)) && ($node_title_list = node_title_list($result, t("This year:")))) {
      $content['top_year'] = $node_title_list;
      $content['top_year']['#suffix'] = '<br />';
    }

    $alltimetop = $config->get('block_top_all_num');
    if ($alltimetop && ($result = statistics_title_list('totalcount', $alltimetop)) && ($node_title_list = node_title_list($result, t('All time:')))) {
      $content['top_all'] = $node_title_list;
      $content['top_all']['#suffix'] = '<br />';
    }

    $lasttop = $config->get('block_top_last_num');
    if ($lasttop && ($result = statistics_title_list('timestamp', $lasttop)) && ($node_title_list = node_title_list($result, t('Last viewed:')))) {
      $content['top_last'] = $node_title_list;
      $content['top_last']['#suffix'] = '<br />';
    }

    if (count($content)) {
      $block['content'] = $content;
      $block['subject'] = t('Popular content');
      return $block;
    }
  }
}

/**
 * Generates a link to a path, truncating the displayed text to a given width.
 *
 * @param $path
 *   The path to generate the link for.
 * @param $width
 *   The width to set the displayed text of the path.
 *
 * @return
 *   A string as a link, truncated to the width, linked to the given $path.
 */
function _statistics_link($path, $width = 35) {
  $title = backdrop_get_path_alias($path);
  $title = truncate_utf8($title, $width, FALSE, TRUE);
  return l($title, $path);
}

/**
 * Formats an item for display, including both the item title and the link.
 *
 * @param $title
 *   The text to link to a path; will be truncated to a maximum width of 35.
 * @param $path
 *   The path to link to; will default to '/'.
 *
 * @return
 *   An HTML string with $title linked to the $path.
 */
function _statistics_format_item($title, $path) {
  $path = ($path ? $path : '/');
  $output  = ($title ? "$title<br />" : '');
  $output .= _statistics_link($path);
  return $output;
}

/**
 * Implements hook_node_delete().
 */
function statistics_node_delete($node) {
  // clean up statistics table when node is deleted
  db_delete('node_counter')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_ranking().
 */
function statistics_ranking() {
  $config = config('statistics.settings');
  if ($config->get('count_content_views')) {
    return array(
      'views' => array(
        'title' => t('Number of views'),
        'join' => array(
          'type' => 'LEFT',
          'table' => 'node_counter',
          'alias' => 'node_counter',
          'on' => 'node_counter.nid = i.sid',
        ),
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        'score' => '2.0 - 2.0 / (1.0 + node_counter.totalcount * CAST(:scale AS DECIMAL))',
        'arguments' => array(':scale' => state_get('statistics_cron_views_scale')),
      ),
    );
  }
}

/**
 * Implements hook_update_index().
 */
function statistics_update_index() {
  state_set('statistics_cron_views_scale', 1.0 / max(1, db_query('SELECT MAX(totalcount) FROM {node_counter}')->fetchField()));
}


/**
 * Determines if the current user is excluded from node count tracking based on
 * his role.
 *
 * @return
 *   boolean TRUE if excluded..
 */
function statistics_node_count_excluded_role() {
  global $user;
  $config = config('statistics.settings');
  $admin_role = config_get('system.core', 'user_admin_role');
  $excluded = FALSE;

  if (array_intersect($user->roles, $config->get('node_count_excluded_roles'))) {
    $excluded = TRUE;
  }
  // If the admin role is excluded, we assume user 1 shouldn't be tracked
  // either.
  if (in_array($admin_role, $config->get('node_count_excluded_roles')) && $user->uid == 1) {
    $excluded = TRUE;
  }

  return $excluded;
}

/**
 * Implements hook_config_info().
 */
function statistics_config_info() {
  $prefixes['statistics.settings'] = array(
    'label' => t('Statistics settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

function statistics_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'statistics') . '/views',
  );
}

/**
 * Implements hook_autoload_info().
 */
function statistics_autoload_info() {
  return array(
    'statistics_views_handler_field_daycount_numeric' => 'views/statistics_views_handler_field_daycount_numeric.inc',
    'statistics_views_handler_field_weekcount_numeric' => 'views/statistics_views_handler_field_weekcount_numeric.inc',
    'statistics_views_handler_field_monthcount_numeric' => 'views/statistics_views_handler_field_monthcount_numeric.inc',
    'statistics_views_handler_field_yearcount_numeric' => 'views/statistics_views_handler_field_yearcount_numeric.inc',
    'statistics_views_handler_field_totalcount_numeric' => 'views/statistics_views_handler_field_totalcount_numeric.inc',
    'statistics_views_handler_field_accesslog_path' => 'views/statistics_views_handler_field_accesslog_path.inc',
    'statistics_views_handler_field_node_counter_timestamp' => 'views/statistics_views_handler_field_node_counter_timestamp.inc',
    'statistics_views_handler_field_numeric' => 'views/statistics_views_handler_field_numeric.inc',
  );
}

/**
 * Clean a path that might be invalid UTF-8.
 */
function _statistics_clean_utf8($path) {
  if (backdrop_validate_utf8($path)) {
    return $path;
  }
  // Oh nos! Invalid UTF-8. Now we fix it.
  return backdrop_convert_to_utf8($path, 'CP1252');
}
